import base64
from typing import List, Tuple

class AES:
	ROUND_CONSTANTS = (0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36)
	ROUND_KEY_VARIANTS = {
		128: 11,
		192: 13,
		256: 15
	}

	S_BOX = (
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
	)

	INV_S_BOX = (
		0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
		0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
		0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
		0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
		0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
		0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
		0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
		0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
		0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
		0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
		0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
		0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
		0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
		0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
		0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
	)

	MIX_MATRIX = (
		2, 3, 1, 1,
		1, 2, 3, 1,
		1, 1, 2, 3,
		3, 1, 1, 2)

	INV_MIX_MATRIX = (
		14, 11, 13, 9,
		9, 14, 11, 13,
		13, 9, 14, 11,
		11, 13, 9, 14
	)

	def __init__(self, key):
		self.key_schedule = AES.expand_keys(key)
		self.num_rounds = len(self.key_schedule) - 1

	@staticmethod
	def expand_keys(key:bytes):
		# check valid key length
		if isinstance(key, bytes):
			key_len = len(key)*8
		elif isinstance(key, str):
			#TODO convert to ordinals and ints
			pass

		try:
			num_keys = AES.ROUND_KEY_VARIANTS[key_len]
		except:
			raise Exception(f'Key lengtj ({key_len}) not in {AES.ROUND_KEY_VARIANTS.keys()}')

		# split key into 32-bit words
		round_words = []
		key_copy = int.from_bytes(key, byteorder='big')

		while key_copy:
			round_words.insert(0, key_copy & 0xFFFFFFFF)
			key_copy >>= 32
		num_initial_words = len(round_words)

		# expand key words
		for j in range(num_initial_words, 4*num_keys):
			idk_key = round_words[j - num_initial_words]
			idk_key2 = round_words[j - 1]

			if j % num_initial_words == 0:
				rcon_index = j // num_initial_words - 1
				round_key = idk_key ^ AES.sub_word(AES.rot_word(idk_key2)) ^ AES.ROUND_CONSTANTS[rcon_index]
			elif j % num_initial_words == 4:
				round_key = idk_key ^ AES.sub_word(idk_key2)
			else:
				round_key = idk_key ^ idk_key2
			round_words.append(round_key)

		# stitch each 4 words together to keys
		# don't look to closely at this horrendous code
		round_keys = []
		for i in range(0, 4*num_keys, 4):
			round_key = []
			for j in range(3, -1, -1):
				word = round_words[i+j]
				for _ in range(4):
					round_key.insert(0, word & 0xFF)
					word >>= 8
			round_keys.append(round_key)
		return round_keys

	def encrypt_block(self, plain:bytes):
		entries = AES.split_message(plain)
		AES.add_round_key(entries, self.key_schedule[0])

		for i in range(1, self.num_rounds):
			AES.sub_bytes(entries, AES.S_BOX)
			AES.shift_rows(entries)
			if i < self.num_rounds-1:
				AES.mix_col(entries, AES.MIX_MATRIX)
			AES.add_round_key(entries, self.key_schedule[i])
		return AES.join_message(entries)

	def decrypt_block(self, cipher:bytes):
		entries = AES.split_message(cipher)

		for i in range(self.num_rounds-1, 0, -1):
			AES.add_round_key(entries, self.key_schedule[i])
			if i < self.num_rounds-1:
				AES.mix_col(entries, AES.INV_MIX_MATRIX)
			AES.shift_rows(entries, direction=-1)
			AES.sub_bytes(entries, AES.INV_S_BOX)

		AES.add_round_key(entries, self.key_schedule[0])
		return AES.join_message(entries)

	@staticmethod
	def split_message(value:bytes):
		# create column major 4x4 matrix of message of 16 bytes
		if len(value) != 16:
			raise Exception(f'Message length ({len(value)}) not equal 16 bytes.')
		return [b for b in value]

	@staticmethod
	def join_message(values:List[int]):
		message = b''
		for val in values:
			message += val.to_bytes(length=1, byteorder='big')
		return message

	@staticmethod
	def rot_word(word:int):
		# left circular shift the word by 1 byte
		return (word & 0xFFFFFF) << 8 | (word & 0xFF000000) >> 24

	@staticmethod
	def sub_word(word:int):
		# perform s box substitution on all 4 bytes
		sub_0 = AES.S_BOX[word & 0xFF]
		sub_1 = AES.S_BOX[word >> 8 & 0xFF] << 8
		sub_2 = AES.S_BOX[word >> 16 & 0xFF] << 16
		sub_3 = AES.S_BOX[word >> 24 & 0xFF] << 24
		return sub_0 | sub_1 | sub_2 | sub_3

	@staticmethod
	def sub_bytes(values:List[int], s_box:Tuple[int]):
		for i in range(16):
			values[i] = s_box[values[i]]

	@staticmethod
	def shift_rows(values:List[int], direction:int = 1):
		#i really gotta use 2D lists
		old_vals = values.copy()
		for row in range(1, 4):
			offset = direction*row
			for col in range(4):
				values[4*col + row] = old_vals[4*((col + offset) % 4) + row]

	@staticmethod
	def mix_col(values:List[int], matrix:Tuple[int]):
		old_vals = values.copy()
		for col in range(4):
			for row in range(4):
				new_val = 0
				for i in range(4):
					new_val ^= AES.gf8_multiply(matrix[4*row + i], old_vals[4*col + i])
				values[4*col + row] = new_val

	@staticmethod
	def gf8_multiply(a:int, b:int):
		result = 0
		for _ in range(8):
			# galois-add A to result, if the x^0 aka 1 position is present in B
			if b & 1:
				result ^= a
			# shift the next x^1 bit in B down to x^0, and in return shift A by x^1
			b >>= 1
			a <<= 1
			# check if A is bigger than x^7
			if a & 0x100:
				# reduce A with irreducible polynomial x^8 + x^4 + x^3 + x + 1
				a ^= 0x11B
		return result

	@staticmethod
	def add_round_key(values:List[int], round_key:List[int]):
		for i in range(16):
			values[i] ^= round_key[i]

def main():
	plain = b'Hdyd fellow kids'
	key = bytes.fromhex('00010203040506070809000102030405')

	aes = AES(key)
	result = aes.encrypt_block(plain)
	print(base64.b64encode(result))
	result = aes.decrypt_block(result)
	print(result)

if __name__ == '__main__':
	main()
